// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler

import (
	"context"
	"sync"

	"github.com/daikiku10/go-test-app-backend/service"
)

// Ensure, that RegisterTemporaryUserServiceMock does implement RegisterTemporaryUserService.
// If this is not the case, regenerate this file with moq.
var _ RegisterTemporaryUserService = &RegisterTemporaryUserServiceMock{}

// RegisterTemporaryUserServiceMock is a mock implementation of RegisterTemporaryUserService.
//
//	func TestSomethingThatUsesRegisterTemporaryUserService(t *testing.T) {
//
//		// make and configure a mocked RegisterTemporaryUserService
//		mockedRegisterTemporaryUserService := &RegisterTemporaryUserServiceMock{
//			RegisterTemporaryUserFunc: func(ctx context.Context, input service.ServiceRegisterTemporaryUserInput) (string, error) {
//				panic("mock out the RegisterTemporaryUser method")
//			},
//		}
//
//		// use mockedRegisterTemporaryUserService in code that requires RegisterTemporaryUserService
//		// and then make assertions.
//
//	}
type RegisterTemporaryUserServiceMock struct {
	// RegisterTemporaryUserFunc mocks the RegisterTemporaryUser method.
	RegisterTemporaryUserFunc func(ctx context.Context, input service.ServiceRegisterTemporaryUserInput) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// RegisterTemporaryUser holds details about calls to the RegisterTemporaryUser method.
		RegisterTemporaryUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input service.ServiceRegisterTemporaryUserInput
		}
	}
	lockRegisterTemporaryUser sync.RWMutex
}

// RegisterTemporaryUser calls RegisterTemporaryUserFunc.
func (mock *RegisterTemporaryUserServiceMock) RegisterTemporaryUser(ctx context.Context, input service.ServiceRegisterTemporaryUserInput) (string, error) {
	if mock.RegisterTemporaryUserFunc == nil {
		panic("RegisterTemporaryUserServiceMock.RegisterTemporaryUserFunc: method is nil but RegisterTemporaryUserService.RegisterTemporaryUser was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input service.ServiceRegisterTemporaryUserInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockRegisterTemporaryUser.Lock()
	mock.calls.RegisterTemporaryUser = append(mock.calls.RegisterTemporaryUser, callInfo)
	mock.lockRegisterTemporaryUser.Unlock()
	return mock.RegisterTemporaryUserFunc(ctx, input)
}

// RegisterTemporaryUserCalls gets all the calls that were made to RegisterTemporaryUser.
// Check the length with:
//
//	len(mockedRegisterTemporaryUserService.RegisterTemporaryUserCalls())
func (mock *RegisterTemporaryUserServiceMock) RegisterTemporaryUserCalls() []struct {
	Ctx   context.Context
	Input service.ServiceRegisterTemporaryUserInput
} {
	var calls []struct {
		Ctx   context.Context
		Input service.ServiceRegisterTemporaryUserInput
	}
	mock.lockRegisterTemporaryUser.RLock()
	calls = mock.calls.RegisterTemporaryUser
	mock.lockRegisterTemporaryUser.RUnlock()
	return calls
}
